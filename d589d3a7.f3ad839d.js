(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(2),r=n(6),o=(n(0),n(92)),s={id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},i={unversionedId:"getting-started",id:"getting-started",isDocsHomePage:!1,title:"Getting Started",description:"What it is",source:"@site/docs/getting-started.md",permalink:"/docs/getting-started",editUrl:"https://github.com/saga-slice/saga-slice.github.io/edit/master/website/docs/getting-started.md",sidebar_label:"Getting Started",sidebar:"docs",next:{title:"Philosophy",permalink:"/docs/philosophy"}},c=[{value:"What it is",id:"what-it-is",children:[]},{value:"Setup",id:"setup",children:[]},{value:"Example",id:"example",children:[]}],l={rightToc:c};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"what-it-is"},"What it is"),Object(o.b)("p",null,"Saga slice is an abstraction on top of redux and sagas meant to help reduce boilerplate around Redux. It uses immer to implement immutability. In a normal redux project with sagas, you typically have 4 files that you would need to keep track of: types.js, reducers.js, actions.js, and sagas.js. With saga slice, you only have to manage 1 file: sagaSlice.js"),Object(o.b)("h2",{id:"setup"},"Setup"),Object(o.b)("p",null,"Get me up and running with saga slices quickly!"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Create a react app if you don't already have one\nnpx create-react-app myApp\ncd myApp\n\n// Install saga slice and dependencies\nnpm i --save redux redux-saga immer saga-slice\n")),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,"Next, we're going to create a sample slice reducer"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"./src/todos/sagaSlice.js")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { put, select, takeLatest } from \"redux-saga/effects\";\nimport { createModule } from 'saga-slice';\n\nconst sagaSlice =  createModule({\n\n    // Key name that gets added to combineReducers\n    name: 'todos',\n    initialState: {\n        isFetching: false,\n        data: null,\n        error: null,\n        shouldRunOnce: 0\n    },\n\n    // Reducers object is the bread and butter of saga slice.\n    // Defining a reducer also defines a type and action.\n    // The type will be `todos/fetch`, using the pattern of `{name}/{key}`\n    reducers: {\n        fetch: (state) => {\n            state.isFetching = true;\n        },\n        fetchSuccess: (state, payload) => {\n            state.isFetching = false;\n            state.data = payload;\n        },\n        fetchFail: (state, payload) => {\n            state.isFetching = false;\n            state.error = payload;\n        }\n    },\n\n    // The sagas option is a function that gets passed the Actions object.\n    // Actions are converted into strings which are the value of its\n    // corresponding type. You can also use the actions object to dispatch\n    // actions from sagas using the `put` effect.\n    sagas: (A) => ({\n        *[A.fetch]({ payload }) {\n            try {\n                const { data } = yield axios.get('/todos');\n                yield put(A.fetchSuccess(data));\n            }\n            catch (e) {\n                yield put(A.fetchFail(data));\n            }\n        }\n    })\n});\n\n// Export actions for convenience when importing from other modules\nexport const actions = sagaSlice.actions;\nexport default sagaSlice;\n")),Object(o.b)("p",null,"Finally, we're going to bring it all in using some other helpers provided by saga slice"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"./src/store.js")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootSaga, rootReducer } from 'saga-slice';\n\n// Bring in all of your saga slices together in whatever file\n// you're going to declare your redux store\nimport TodosSlice from './todos/sagaSlice.js';\n\n// And add all of your saga slices into an array\nconst modules = [\n    TodosSlice\n];\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// Use the `rootReducer` helper function to create a\n// main reducer out of the array of saga-slice modules.\n// You can optionally pass other reducers to this root\n// reducer for cases where you have something outside the\n// scope of saga-slice\nconst appReducer = rootReducer(modules, {\n    myExtraReducer: (state, action) => { /* do stuff */ }\n});\n\n// Typicaly redux middleware\nconst middleware = applyMiddleware(...[\n    sagaMiddleware,\n    /* redux dev tools, etc*/\n])\n\nconst store = createStore(appReducer, middleware);\n\n// Use the `rootSaga` helper function to create a generator function\n// which will instantiate all sagas using the `*all()` effect based\n// on the saga-slice modules array\nsagaMiddleware.run(rootSaga(modules));\n\nexport default store;\n")),Object(o.b)("p",null,"And that's it! You're ready to start using saga slices in your app."))}d.isMDXComponent=!0},92:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),d=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},g=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=d(n),g=a,f=u["".concat(s,".").concat(g)]||u[g]||p[g]||o;return n?r.a.createElement(f,i(i({ref:t},l),{},{components:n})):r.a.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"}}]);